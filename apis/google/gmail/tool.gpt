name: listInbox
description: List emails in the user's Gmail inbox
credential: github.com/gptscript-ai/gateway-oauth2 as google.gmail.read with GMAIL_GOOGLE_OAUTH_TOKEN as env and google-gmail as integration and "https://www.googleapis.com/auth/userinfo.email openid https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/gmail.readonly" as scope
param: max_results: Maximum number of emails to list (Optional: Default will list all emails in the inbox)

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/listInbox.py

---
name: readEmail
description: Read an email from the user's Gmail account
credential: github.com/gptscript-ai/gateway-oauth2 as google.gmail.read with GMAIL_GOOGLE_OAUTH_TOKEN as env and google-gmail as integration and "https://www.googleapis.com/auth/userinfo.email openid https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/gmail.readonly" as scope
param: email_id: Email ID to read (Optional: If not provided, email_subject is required)
param: email_subject: Email subject to read (Optional: If not provided, email_id is required)

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/readEmail.py

---
name: searchEmails
description: Search a user's Gmail account for emails. Will return the email_id for each message. Can also be used to list emails in a folder or with a label.
credential: github.com/gptscript-ai/gateway-oauth2 as google.gmail.read with GMAIL_GOOGLE_OAUTH_TOKEN as env and google-gmail as integration and "https://www.googleapis.com/auth/userinfo.email openid https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/gmail.readonly" as scope
param: query: Search query to find emails in the user's Gmail account. Uses Gmail search syntax (e.g., "from:someuser@example.com rfc822msgid:<somemsgid@example.com> is:unread")
param: max_results: Maximum number of emails to list (Optional: Default will list all emails that match the query)

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/searchEmails.py

---
name: sendEmail
description: Send an email from the user's Gmail account.
context: forwardEmailContext
credential: github.com/gptscript-ai/gateway-oauth2 as google.gmail.write with GMAIL_GOOGLE_OAUTH_TOKEN as env and google-gmail as integration and "https://www.googleapis.com/auth/userinfo.email openid https://www.googleapis.com/auth/userinfo.profile https://mail.google.com/ https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.compose" as scope
param: to_emails: A comma separated list of email addresses to send the email to
param: cc_emails: A comma separated list of email addresses to cc the email to (Optional)
param: bcc_emails: A comma separated list of email addresses to bcc the email to (Optional)
param: subject: Subject of the email.
param: message: Message body of the email.

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/sendEmail.py

---
name: forwardEmailContext
type: context

#!sys.echo

## Instructions for sending a forwarded email with the sendEmail tool
When forwarding an email, retrieve the contents of the original email using the readEmail tool.
Call the `sendEmail` tool using this data with the following modifications:
- prepend `Fwd: ` to the subject
- add the original message as a quoted reply in the message body, with the following template prepended to the original message: `---------- Forwarded message ---------\nFrom: <original_sender>\nDate: <original_date>\nSubject: <original_subject>\nTo: <original_recipient>`
- if the user has an additional message to add, include it above the quoted reply

## End of instructions for sending a forwarded email with the sendEmail tool

---
name: deleteEmail
description: Delete an email in a user's Gmail account.
credential: github.com/gptscript-ai/gateway-oauth2 as google.gmail.write with GMAIL_GOOGLE_OAUTH_TOKEN as env and google-gmail as integration and "https://www.googleapis.com/auth/userinfo.email openid https://www.googleapis.com/auth/userinfo.profile https://mail.google.com/ https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.compose" as scope
param: email_id: The ID of the email to delete

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/deleteEmail.py

---
name: createDraft
description: Create a draft email in a user's Gmail account
credential: github.com/gptscript-ai/gateway-oauth2 as google.gmail.write with GMAIL_GOOGLE_OAUTH_TOKEN as env and google-gmail as integration and "https://www.googleapis.com/auth/userinfo.email openid https://www.googleapis.com/auth/userinfo.profile https://mail.google.com/ https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.compose" as scope
param: to_emails: A comma separated list of email addresses to send the email to
param: cc_emails: A comma separated list of email addresses to cc the email to (Optional)
param: bcc_emails: A comma separated list of email addresses to bcc the email to (Optional)
param: subject: Subject of the email
param: message: Message body of the email

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/createDraft.py

---
name: updateDraft
description: Update a draft email in a user's Gmail account. Make sure you call readEmail to get the contents of the current draft before updating the draft.
credential: github.com/gptscript-ai/gateway-oauth2 as google.gmail.write with GMAIL_GOOGLE_OAUTH_TOKEN as env and google-gmail as integration and "https://www.googleapis.com/auth/userinfo.email openid https://www.googleapis.com/auth/userinfo.profile https://mail.google.com/ https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.compose" as scope
param: draft_id: The ID of the draft email to update
param: to_emails: A comma separated list of email addresses to send the email to
param: cc_emails: A comma separated list of email addresses to cc the email to (Optional)
param: bcc_emails: A comma separated list of email addresses to bcc the email to (Optional)
param: subject: Subject of the email
param: message: Message body of the email

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/updateDraft.py

---
name: deleteDraft
description: Delete a draft email in a user's Gmail account.
credential: github.com/gptscript-ai/gateway-oauth2 as google.gmail.write with GMAIL_GOOGLE_OAUTH_TOKEN as env and google-gmail as integration and "https://www.googleapis.com/auth/userinfo.email openid https://www.googleapis.com/auth/userinfo.profile https://mail.google.com/ https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.compose" as scope
param: draft_id: The ID of the draft email to delete

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/deleteDraft.py

---
name: sendDraft
description: Send a draft email in a user's Gmail account. Assumes the draft email has already been created and has all the required fields filled out.
credential: github.com/gptscript-ai/gateway-oauth2 as google.gmail.write with GMAIL_GOOGLE_OAUTH_TOKEN as env and google-gmail as integration and "https://www.googleapis.com/auth/userinfo.email openid https://www.googleapis.com/auth/userinfo.profile https://mail.google.com/ https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.compose" as scope
param: draft_id: The ID of the draft email to send

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/sendDraft.py
